{"version":3,"sources":["utils/Constants.js","store/actions.js","components/Dropdown.js","components/Header.js","components/AppliedFilters.js","utils/WindowSize.js","utils/Data.js","components/Trailer.js","store/reducer.js","store/store.js","components/Dashboard.js","utils/ScrollEffect.js","utils/Utilities.js","components/Main.js","images/loading.gif","index.js"],"names":["StoreActions","SetFullData","SetSortBy","ToggleLanguageFilter","ToggleGenreFilter","ToggleReleasedMovies","RunTrailer","SortBy","Popular","Fresh","setFullData","data","type","payload","setSortBy","sortBy","toggleLanguageFilter","filter","add","toggleGenreFilter","toggleReleasedMovies","showing","runTrailer","movieID","Dropdown","label","list","isFilter","select","dropddownListRender","forEach","option","i","checkboxClass","includes","push","className","onClick","renderLabel","length","join","Header","dispatch","useDispatch","useSelector","state","languageList","genreList","showingReleasedMovies","languageFilter","genreFilter","x","AppliedFilters","map","useWindowSize","useState","width","height","size","setSize","useLayoutEffect","timeout","updateSize","clearTimeout","setTimeout","window","innerWidth","innerHeight","console","log","addEventListener","removeEventListener","getGenres","moviesData","genres","key","movieGenres","EventGenre","split","movieGenre","setGenre","Set","sort","getLanguages","langs","movieLang","EventLanguage","setLang","Trailer","movie","trailerRef","useRef","showDate","date","day","month","year","parseDate","ShowDate","trailerID","TrailerURL","useEffect","scrollTo","current","offsetTop","ref","id","title","EventTitle","src","frameborder","allowtransparency","allowFullScreen","EventDimension","genre","ratings","wtsPerc","wtsCount","maybe","dwtsCount","defaultState","moviesList","runningTrailerID","store","createStore","action","newState","splice","indexOf","MovieCard","React","lazy","Dashboard","filteredMoviesList","j","a","b","trailerUploadDate","parseInt","listItems","mainList","dependencyList","isLoading","setIsLoading","page","setPage","setListItems","parts","pages","currPage","splitList","handleScroll","Math","ceil","document","documentElement","scrollTop","offsetHeight","top","behavior","useScrollEffect","oldTrailerNodes","getElementsByClassName","parentNode","removeChild","find","m","EventCode","movieBlockNode","getElementById","TrailerComponent","createElement","rightNode","leftNode","previousElementSibling","rightTop","getBoundingClientRect","leftTop","insertBefore","ReactDOM","render","trailerNodes","fallback","loadingGif","Main","setLoading","axios","get","config","ApiUrl","then","res","status","dummyData","catch","e","bgImage","EventImageUrl","blurBG","backgroundImage","style","alt"],"mappings":"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","file":"static/js/main.585456b0.chunk.js","sourcesContent":["export const StoreActions = {\r\n    SetFullData: \"SetFullData\",\r\n    SetSortBy: \"SetSortBy\",\r\n    ToggleLanguageFilter: \"ToggleLanguageFilter\",\r\n    ToggleGenreFilter: \"ToggleGenreFilter\",\r\n    ToggleReleasedMovies: \"ToggleReleasedMovies\",\r\n    RunTrailer: \"RunTrailer\",\r\n};\r\n\r\nexport const SortBy = {\r\n    Popular: \"Popular\",\r\n    Fresh: \"Fresh\",\r\n};\r\n","import { StoreActions } from \"../utils/Constants.js\";\r\n\r\n//export set of action generators function for Redux\r\n\r\nexport function setFullData(data) {\r\n    const action = {\r\n        type: StoreActions.SetFullData,\r\n        payload: {\r\n            data: data,\r\n        },\r\n    };\r\n    return action;\r\n}\r\n\r\nexport function setSortBy(sortBy) {\r\n    const action = {\r\n        type: StoreActions.SetSortBy,\r\n        payload: {\r\n            sortBy: sortBy,\r\n        },\r\n    };\r\n    return action;\r\n}\r\n\r\nexport function toggleLanguageFilter(filter, add) {\r\n    const action = {\r\n        type: StoreActions.ToggleLanguageFilter,\r\n        payload: {\r\n            filter: filter,\r\n            add: add,\r\n        },\r\n    };\r\n    return action;\r\n}\r\n\r\nexport function toggleGenreFilter(filter, add) {\r\n    const action = {\r\n        type: StoreActions.ToggleGenreFilter,\r\n        payload: {\r\n            filter: filter,\r\n            add: add,\r\n        },\r\n    };\r\n    return action;\r\n}\r\n\r\nexport function toggleReleasedMovies(showing) {\r\n    const action = {\r\n        type: StoreActions.ToggleReleasedMovies,\r\n        payload: {\r\n            showing: showing,\r\n        },\r\n    };\r\n    return action;\r\n}\r\n\r\nexport function runTrailer(movieID) {\r\n    const action = {\r\n        type: StoreActions.RunTrailer,\r\n        payload: {\r\n            movieID: movieID,\r\n        },\r\n    };\r\n    return action;\r\n}\r\n","import React from \"react\";\r\nimport { FaCaretDown } from \"react-icons/fa\";\r\nimport \"../styles/Dropdown.css\";\r\n\r\n/**\r\n * A reusable dropdown component\r\n * @param label : text\r\n * @param list : shown in dropdown\r\n * @param isFilter : bool whether to show checkbox for filters\r\n * @param select : function to run when clicked on any dropdown item\r\n */\r\nexport default function Dropdown({ label, list = [], isFilter, select }) {\r\n    // Fill up the Dropdown menu as a list of divs\r\n    const dropddownListRender = [];\r\n    list.forEach((option, i) => {\r\n        let checkboxClass = \"dropdown-item-checkbox\";\r\n        let add = true;\r\n        if (label.includes(option)) {\r\n            add = false;\r\n            checkboxClass += \" checked\";\r\n        }\r\n        dropddownListRender.push(\r\n            <div key={option + \"_\" + i} className={\"dropdown-item\"} onClick={() => select(option, add)}>\r\n                {isFilter && (\r\n                    <div className={checkboxClass}>\r\n                        {\" \"}\r\n                        <span>&#10003;</span>{\" \"}\r\n                    </div>\r\n                )}\r\n                <span className=\"ellipsis\"> {option} </span>\r\n            </div>,\r\n        );\r\n    });\r\n\r\n    // Set label as ALL or the chosen list\r\n    const renderLabel = isFilter && label && label.length > 0 ? label.join() : label;\r\n\r\n    return (\r\n        <div className=\"dropdown\">\r\n            <button className=\"btn dropdown-btn\" type=\"button\">\r\n                <span className=\"dropdown-label ellipsis\"> {renderLabel} </span>\r\n                <FaCaretDown className=\"dropdown-icon\" />\r\n            </button>\r\n\r\n            <div className=\"dropdown-menu \">{dropddownListRender}</div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Dropdown from \"./Dropdown.js\";\r\nimport { toggleReleasedMovies, setSortBy, toggleGenreFilter, toggleLanguageFilter } from \"../store/actions.js\";\r\nimport \"../styles/Header.css\";\r\n\r\n// Topmost fixed header includes the Title, buttons and dropdowns\r\nexport default function Header() {\r\n    const dispatch = useDispatch();\r\n\r\n    const sortBy = useSelector(state => state.sortBy);\r\n    const languageList = useSelector(state => state.languageList);\r\n    const genreList = useSelector(state => state.genreList);\r\n    const showingReleasedMovies = useSelector(state => state.showingReleasedMovies);\r\n\r\n    let languageFilter = useSelector(state => state.languageFilter);\r\n    let genreFilter = useSelector(state => state.genreFilter);\r\n\r\n    // Set default dropdown label text, if no filters are chosen\r\n    if (!languageFilter || languageFilter.length === 0) languageFilter = [\"All Languages\"];\r\n    if (!genreFilter || genreFilter.length === 0) genreFilter = [\"All Genres\"];\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"header-item\">\r\n                <div className=\"header-title\"> Movie Trailers </div>\r\n                <div className=\"display-flex\">\r\n                    <button\r\n                        className={showingReleasedMovies ? \"btn header-button\" : \"btn header-button active\"}\r\n                        onClick={() => dispatch(toggleReleasedMovies(false))}\r\n                    >\r\n                        coming soon\r\n                    </button>\r\n                    <button\r\n                        className={showingReleasedMovies ? \"btn header-button active\" : \"btn header-button\"}\r\n                        onClick={() => dispatch(toggleReleasedMovies(true))}\r\n                    >\r\n                        now showing\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"header-item\">\r\n                <Dropdown label={sortBy} list={[\"Popular\", \"Fresh\"]} isFilter={false} select={x => dispatch(setSortBy(x))} />\r\n                <Dropdown\r\n                    label={languageFilter}\r\n                    list={languageList}\r\n                    isFilter={true}\r\n                    select={(x, add = true) => dispatch(toggleLanguageFilter(x, add))}\r\n                />\r\n                <Dropdown label={genreFilter} list={genreList} isFilter={true} select={(x, add = true) => dispatch(toggleGenreFilter(x, add))} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { toggleGenreFilter, toggleLanguageFilter } from \"../store/actions\";\r\nimport \"../styles/AppliedFilters.css\";\r\n\r\n/**\r\n * Shows the list of filters that are applied ,\r\n * each having cross button that will remove that filter\r\n * Horizontally scrollable if goes beyond the window width\r\n */\r\nexport default function AppliedFilters() {\r\n    const dispatch = useDispatch();\r\n    let languageFilter = useSelector(state => state.languageFilter);\r\n    let genreFilter = useSelector(state => state.genreFilter);\r\n\r\n    return (\r\n        <div className=\"applied-filters\">\r\n            <div className=\"label\">Applied Filters: </div>\r\n\r\n            <div className=\"list\">\r\n                {languageFilter.map(filter => {\r\n                    return (\r\n                        <div key={filter} className=\"filter-item\">\r\n                            <span> {filter} </span>\r\n                            <span onClick={() => dispatch(toggleLanguageFilter(filter, false))} className=\"filter-cross\">\r\n                                &#x2715;\r\n                            </span>\r\n                        </div>\r\n                    );\r\n                })}\r\n\r\n                {genreFilter.map(filter => {\r\n                    return (\r\n                        <div key={filter} className=\"filter-item\">\r\n                            <span> {filter} </span>\r\n                            <span onClick={() => dispatch(toggleGenreFilter(filter, false))} className=\"filter-cross\">\r\n                                &#x2715;\r\n                            </span>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { useLayoutEffect, useState } from \"react\";\r\n\r\n// A custom reusable hook to capture change in the window size\r\nexport default function useWindowSize() {\r\n    const [size, setSize] = useState({ width: 0, height: 0 });\r\n\r\n    useLayoutEffect(() => {\r\n        let timeout;\r\n\r\n        function updateSize() {\r\n            clearTimeout(timeout);\r\n            timeout = setTimeout(() => {\r\n                setSize({ width: window.innerWidth, height: window.innerHeight });\r\n                console.log(\"Width Changed\");\r\n            }, 500);\r\n        }\r\n\r\n        window.addEventListener(\"resize\", updateSize);\r\n        updateSize();\r\n        return () => window.removeEventListener(\"resize\", updateSize);\r\n    }, []);\r\n\r\n    return size;\r\n}\r\n","// Get a full list of genres from the moviesData\r\nexport function getGenres(moviesData) {\r\n    let genres = [];\r\n    if (!moviesData) return [];\r\n\r\n    for (const key in moviesData) {\r\n        let movie = moviesData[key];\r\n        let movieGenres = movie.EventGenre.split(\"|\");\r\n        if (movieGenres && movieGenres.length > 0) {\r\n            movieGenres.forEach(movieGenre => {\r\n                genres.push(movieGenre);\r\n            });\r\n        }\r\n    }\r\n\r\n    let setGenre = new Set(genres);\r\n    return [...setGenre].sort();\r\n}\r\n\r\n// Get a full list of languages from the moviesData\r\nexport function getLanguages(moviesData) {\r\n    let langs = [];\r\n    if (!moviesData) return [];\r\n\r\n    for (const key in moviesData) {\r\n        let movie = moviesData[key];\r\n        let movieLang = movie.EventLanguage;\r\n        langs.push(movieLang);\r\n    }\r\n\r\n    let setLang = new Set(langs);\r\n    return [...setLang].sort();\r\n}\r\n\r\nexport const getTrailerIdFromURL = url => url.split(\"v=\")[1].split(\"&\")[0];\r\n\r\nexport function parseDate(showDate) {\r\n    const date = showDate.split(\" \");\r\n    return {\r\n        day: date[0],\r\n        month: date[1].split(\",\")[0],\r\n        year: date[2],\r\n    };\r\n}\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { MdThumbDown, MdThumbUp } from \"react-icons/md\";\r\nimport { GoCalendar } from \"react-icons/go\";\r\nimport { BiQuestionMark } from \"react-icons/bi\";\r\n\r\nimport \"../styles/Trailer.css\";\r\nimport useWindowSize from \"../utils/WindowSize\";\r\nimport { getTrailerIdFromURL, parseDate } from \"../utils/Data\";\r\n\r\n/**\r\n * The Trailer component is called when user clicks on MovieCard\r\n * This component is called from the Dashboard and\r\n * its position in the flex is dynamically calculated in Dashboard\r\n */\r\nexport default function Trailer({ movie }) {\r\n    const { width } = useWindowSize();\r\n    const trailerRef = useRef(null);\r\n    const { day, month, year } = parseDate(movie.ShowDate);\r\n    const trailerID = getTrailerIdFromURL(movie.TrailerURL);\r\n\r\n    // Scroll to the trailer when a trailer is loaded or when the window is resized\r\n    useEffect(() => {\r\n        if (trailerID && trailerID !== \"\") {\r\n            window.scrollTo(0, trailerRef.current.offsetTop - 130);\r\n        }\r\n    }, [trailerID, width]);\r\n\r\n    return (\r\n        <div ref={trailerRef} className=\"trailer-container\">\r\n            <iframe\r\n                id={trailerID}\r\n                title={movie.EventTitle}\r\n                className=\"trailer-iframe\"\r\n                src={\"https://www.youtube.com/embed/\" + trailerID + \"?autoplay=1&mute=1&enablejsapi=1\"}\r\n                frameborder=\"0\"\r\n                allowtransparency=\"true\"\r\n                allowFullScreen=\"true\"\r\n            />\r\n            <div className=\"movie-details\">\r\n                <div className=\"title\"> {movie.EventTitle} </div>\r\n                <div className=\"language\">\r\n                    {movie.EventLanguage} ({movie.EventDimension})\r\n                </div>\r\n                <div className=\"genre-list\">\r\n                    {movie.EventGenre.split(\"|\").map(genre => (\r\n                        <div className=\"genre\">{genre}</div>\r\n                    ))}\r\n                </div>\r\n\r\n                <div className=\"rate-date flex-row\">\r\n                    <MdThumbUp className=\"icon\" />\r\n                    <div className=\"rate flex-column\">\r\n                        <div className=\"big-text\">{movie.ratings.wtsPerc}%</div>\r\n                        <div className=\"small-text\">{movie.ratings.wtsCount} votes</div>\r\n                    </div>\r\n\r\n                    <GoCalendar className=\"icon margin-l-20\" />\r\n                    <div className=\"date flex-column\">\r\n                        <div className=\"big-text\">{day + \" \" + month} </div>\r\n                        <div className=\"small-text\">{year}</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"watch-qstn flex-row\">\r\n                    <div className=\"flex-center\">\r\n                        <MdThumbUp className=\"yes icon\" />\r\n                        <div className=\"yes text\">will watch</div>\r\n                        <div className=\"yes text\">({movie.ratings.wtsCount})</div>\r\n                    </div>\r\n                    <div className=\"flex-center\">\r\n                        <BiQuestionMark className=\"maybe icon\" />\r\n                        <div className=\"maybe text\">maybe</div>\r\n                        <div className=\"maybe text\">({movie.ratings.maybe})</div>\r\n                    </div>\r\n                    <div className=\"flex-center\">\r\n                        <MdThumbDown className=\"no icon\" />\r\n                        <div className=\"no text\">won't watch</div>\r\n                        <div className=\"no text\">({movie.ratings.dwtsCount})</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { StoreActions } from \"../utils/Constants.js\";\r\nimport { getLanguages, getGenres } from \"../utils/Data.js\";\r\n\r\n// Default state for our redux store\r\nconst defaultState = {\r\n    showingReleasedMovies: false,\r\n    languageList: [],\r\n    moviesList: [],\r\n    sortBy: \"Default\",\r\n    languageFilter: [],\r\n    genreList: [],\r\n    genreFilter: [],\r\n    runningTrailerID: \"\",\r\n};\r\n\r\n// Reducer function for our redux store\r\nexport function reducer(state = defaultState, action) {\r\n    switch (action.type) {\r\n        // Set the full data which includes list of movies, languages, genres (Run just once on initial load)\r\n        case StoreActions.SetFullData: {\r\n            let newState = { ...state };\r\n            newState.languageList = getLanguages(action.payload.data.moviesData);\r\n            let moviesList = [];\r\n            for (const key in action.payload.data.moviesData) {\r\n                let movie = action.payload.data.moviesData[key];\r\n                moviesList.push(movie);\r\n            }\r\n            newState.moviesList = [...moviesList];\r\n\r\n            newState.genreList = getGenres(action.payload.data.moviesData);\r\n            newState.runningTrailerID = \"\";\r\n            return newState;\r\n        }\r\n\r\n        // Set the sortBy field from the first dropdown (Popular or Fresh)\r\n        case StoreActions.SetSortBy: {\r\n            let newState = { ...state };\r\n            newState.sortBy = action.payload.sortBy;\r\n            newState.runningTrailerID = \"\";\r\n            return newState;\r\n        }\r\n\r\n        // Set the language filter list from the second dropdown (English, Hindi, Marathi ...)\r\n        case StoreActions.ToggleLanguageFilter: {\r\n            let newState = { ...state };\r\n            newState.languageFilter = [...state.languageFilter];\r\n            newState.runningTrailerID = \"\";\r\n            if (action.payload.add) newState.languageFilter.push(action.payload.filter);\r\n            else newState.languageFilter.splice(newState.languageFilter.indexOf(action.payload.filter), 1);\r\n            return newState;\r\n        }\r\n\r\n        // Set the genre filter list from the third dropdown (Action, Comedy, Drama ...)\r\n        case StoreActions.ToggleGenreFilter: {\r\n            let newState = { ...state };\r\n            newState.genreFilter = [...state.genreFilter];\r\n            newState.runningTrailerID = \"\";\r\n            if (action.payload.add) newState.genreFilter.push(action.payload.filter);\r\n            else newState.genreFilter.splice(newState.genreFilter.indexOf(action.payload.filter), 1);\r\n            return newState;\r\n        }\r\n\r\n        // Set the showing flag from the two header buttons (Coming Soon or Now showing)\r\n        case StoreActions.ToggleReleasedMovies: {\r\n            let newState = { ...state };\r\n            newState.showingReleasedMovies = action.payload.showing;\r\n            newState.runningTrailerID = \"\";\r\n            return newState;\r\n        }\r\n\r\n        // Set the movie ID for the current running trailer and start the trailer (Called when user clicks on any movie card/image)\r\n        case StoreActions.RunTrailer: {\r\n            let newState = { ...state };\r\n            newState.runningTrailerID = action.payload.movieID;\r\n            return newState;\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n","import { createStore } from \"redux\";\r\nimport { reducer } from \"./reducer.js\";\r\n\r\nconst store = createStore(reducer);\r\nexport default store;\r\n","import React, { useEffect, Suspense } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { useSelector, Provider } from \"react-redux\";\r\n\r\nimport \"../styles/Dashboard.css\";\r\nimport AppliedFilters from \"./AppliedFilters\";\r\nimport { SortBy } from \"../utils/Constants\";\r\nimport useScrollEffect from \"../utils/ScrollEffect\";\r\nimport Trailer from \"./Trailer\";\r\nimport useWindowSize from \"../utils/WindowSize.js\";\r\nimport store from \"../store/store\";\r\n\r\nconst MovieCard = React.lazy(() => import(\"./MovieCard\"));\r\n\r\n/**\r\n * The Main Dashboard component - starts below the Header\r\n * Includes the AppliedFilters component\r\n * Calls the MovieBlock component for each movie in the movie list\r\n */\r\nexport default function Dashboard() {\r\n    const { width } = useWindowSize();\r\n    const moviesList = useSelector(state => state.moviesList);\r\n    const sortBy = useSelector(state => state.sortBy);\r\n    const languageFilter = useSelector(state => state.languageFilter);\r\n    const genreFilter = useSelector(state => state.genreFilter);\r\n    const runningTrailerID = useSelector(state => state.runningTrailerID);\r\n\r\n    // Filtering and Sorting the Movie List\r\n    let filteredMoviesList = [];\r\n    if (moviesList && moviesList.length > 0) {\r\n        filteredMoviesList = [...moviesList];\r\n\r\n        if (languageFilter && languageFilter.length > 0)\r\n            filteredMoviesList = filteredMoviesList.filter(movie => languageFilter.includes(movie.EventLanguage));\r\n\r\n        if (genreFilter && genreFilter.length > 0) {\r\n            filteredMoviesList = filteredMoviesList.filter(movie => {\r\n                let movieGenres = movie.EventGenre.split(\"|\");\r\n\r\n                for (let j = 0; j < genreFilter.length; j++) {\r\n                    const genre = genreFilter[j];\r\n\r\n                    if (movieGenres.includes(genre)) return true;\r\n                }\r\n                return false;\r\n            });\r\n        }\r\n\r\n        if (sortBy === SortBy.Fresh) {\r\n            filteredMoviesList.sort((a, b) => b.trailerUploadDate - a.trailerUploadDate);\r\n        } else if (sortBy === SortBy.Popular) {\r\n            filteredMoviesList.sort((a, b) => parseInt(b.ratings.wtsCount) - parseInt(a.ratings.wtsCount));\r\n        }\r\n    }\r\n\r\n    // Scrolling effect to load and render more movies on scroll\r\n    const listItems = useScrollEffect(filteredMoviesList, [moviesList, sortBy, languageFilter, genreFilter]);\r\n\r\n    //Render the trailer node above the selected row\r\n    useEffect(() => {\r\n        const oldTrailerNodes = document.getElementsByClassName(\"trailer-component\");\r\n        if (oldTrailerNodes && oldTrailerNodes.length > 0) oldTrailerNodes[0].parentNode.removeChild(oldTrailerNodes[0]);\r\n\r\n        if (runningTrailerID && runningTrailerID !== \"\") {\r\n            const movie = moviesList.find(m => m.EventCode === runningTrailerID);\r\n\r\n            const movieBlockNode = document.getElementById(runningTrailerID);\r\n            const TrailerComponent = document.createElement(\"div\");\r\n            TrailerComponent.className = \"trailer-component\";\r\n            TrailerComponent.id = \"trailer-component-\" + runningTrailerID;\r\n\r\n            let rightNode = movieBlockNode;\r\n            let leftNode = rightNode.previousElementSibling;\r\n\r\n            if (leftNode !== null) {\r\n                let rightTop = rightNode.getBoundingClientRect().top;\r\n                let leftTop = leftNode.getBoundingClientRect().top;\r\n\r\n                while (rightTop === leftTop) {\r\n                    leftNode = leftNode.previousElementSibling;\r\n                    rightNode = rightNode.previousElementSibling;\r\n\r\n                    if (leftNode == null) break;\r\n\r\n                    rightTop = rightNode.getBoundingClientRect().top;\r\n                    leftTop = leftNode.getBoundingClientRect().top;\r\n                }\r\n            }\r\n\r\n            const movieListElement = document.getElementsByClassName(\"movie-list\")[0];\r\n            movieListElement.insertBefore(TrailerComponent, rightNode);\r\n\r\n            ReactDOM.render(\r\n                <Provider store={store}>\r\n                    <Trailer movie={movie} />\r\n                </Provider>,\r\n                document.getElementById(TrailerComponent.id),\r\n            );\r\n        }\r\n    }, [runningTrailerID]);\r\n\r\n    // Move the trailer above the selected row on resize\r\n    useEffect(() => {\r\n        if (runningTrailerID && runningTrailerID !== \"\") {\r\n            const trailerNodes = document.getElementsByClassName(\"trailer-component\");\r\n            if (trailerNodes && trailerNodes.length > 0) {\r\n                const TrailerComponent = trailerNodes[0];\r\n                TrailerComponent.parentNode.removeChild(TrailerComponent);\r\n\r\n                const movieBlockNode = document.getElementById(runningTrailerID);\r\n\r\n                let rightNode = movieBlockNode;\r\n                let leftNode = rightNode.previousElementSibling;\r\n\r\n                if (leftNode !== null) {\r\n                    let rightTop = rightNode.getBoundingClientRect().top;\r\n                    let leftTop = leftNode.getBoundingClientRect().top;\r\n\r\n                    while (rightTop === leftTop) {\r\n                        leftNode = leftNode.previousElementSibling;\r\n                        rightNode = rightNode.previousElementSibling;\r\n\r\n                        if (leftNode === null) break;\r\n\r\n                        rightTop = rightNode.getBoundingClientRect().top;\r\n                        leftTop = leftNode.getBoundingClientRect().top;\r\n                    }\r\n                }\r\n\r\n                const movieListElement = document.getElementsByClassName(\"movie-list\")[0];\r\n                movieListElement.insertBefore(TrailerComponent, rightNode);\r\n            }\r\n        }\r\n    }, [width]);\r\n\r\n    return (\r\n        <div className=\"dashboard\">\r\n            <AppliedFilters />\r\n\r\n            <div className=\"movie-list\">\r\n                {listItems &&\r\n                    listItems.length > 0 &&\r\n                    listItems.map(movie => (\r\n                        <div key={movie.EventCode} id={movie.EventCode}>\r\n                            <Suspense fallback={<div className=\"display-none\"></div>}>\r\n                                <MovieCard key={movie.EventCode} movie={movie} />\r\n                            </Suspense>\r\n                        </div>\r\n                    ))}\r\n                {!listItems || (listItems.length == 0 && <div className=\"margin-t-100\"> No data found for the applied filter.</div>)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { splitList } from \"../utils/Utilities.js\";\r\n\r\n/**\r\n * A custom reusable hook to enable infinite scrolling effect\r\n * for applications that have full list of data to be renderred\r\n * Takes 2 arguments\r\n * - mainList - the whole list of data which will be divided into parts\r\n * - dependencyArray - dependency array for the useEfffect that sets the first data\r\n */\r\nexport default function useScrollEffect(mainList, dependencyList) {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [page, setPage] = useState(1);\r\n    const [listItems, setListItems] = useState([]);\r\n\r\n    // Split list into parts\r\n    let list = splitList(mainList, 20);\r\n\r\n    // Run on every scroll\r\n    const handleScroll = () => {\r\n        if (Math.ceil(window.innerHeight + document.documentElement.scrollTop) !== document.documentElement.offsetHeight || isLoading) return;\r\n\r\n        if (page < list.length - 1) setIsLoading(true);\r\n    };\r\n\r\n    // useEffect to set initial data\r\n    useEffect(() => {\r\n        if (list && list.length > 0) {\r\n            const data = list[1];\r\n            if (data && data.length > 0) setListItems(() => [...data]);\r\n            else setListItems(() => []);\r\n\r\n            window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n\r\n            window.addEventListener(\"scroll\", handleScroll);\r\n            return () => window.removeEventListener(\"scroll\", handleScroll);\r\n        }\r\n    }, dependencyList);\r\n\r\n    // useEffect to set the data after scrolled beyond the existing data\r\n    useEffect(() => {\r\n        if (!isLoading) return;\r\n\r\n        setTimeout(() => {\r\n            if (page < list.length - 1) {\r\n                const data = list[page + 1];\r\n                setPage(page + 1);\r\n                if (data && data.length > 0) setListItems(() => [...listItems, ...data]);\r\n            }\r\n        }, 300);\r\n\r\n        setIsLoading(false);\r\n    }, [isLoading]);\r\n\r\n    return listItems;\r\n}\r\n","function pad(number, length) {\r\n    var str = \"\" + number;\r\n    while (str.length < length) {\r\n        str = \"0\" + str;\r\n    }\r\n    return str;\r\n}\r\n\r\nexport function DateToString(date) {\r\n    var yyyy = date.getFullYear().toString();\r\n    var MM = pad(date.getMonth() + 1, 2);\r\n    var dd = pad(date.getDate(), 2);\r\n    var hh = pad(date.getHours(), 2);\r\n    var mm = pad(date.getMinutes(), 2);\r\n    var ss = pad(date.getSeconds(), 2);\r\n\r\n    return yyyy + MM + dd + hh + mm + ss;\r\n}\r\n\r\nexport function splitList(list, parts) {\r\n    let pages = [];\r\n    let currPage = [];\r\n    for (let i = 0; i < list.length; i++) {\r\n        if (i % parts === 0) {\r\n            pages.push(currPage);\r\n            currPage = [];\r\n        }\r\n        currPage.push(list[i]);\r\n    }\r\n\r\n    if (currPage !== []) pages.push(currPage);\r\n\r\n    return pages;\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport axios from \"axios\";\r\n\r\nimport config from \"../config.json\";\r\nimport dummyData from \"../dummyData.json\";\r\nimport Header from \"./Header.js\";\r\nimport { setFullData } from \"../store/actions\";\r\nimport Dashboard from \"./Dashboard\";\r\nimport \"../styles/Main.css\";\r\n\r\nimport * as img from \"../images/loading.gif\";\r\nconst loadingGif = img.default;\r\n//const loadingGif = require(\"../images/loading.gif\");\r\n\r\n/**\r\n * Main component which is called from index.js\r\n * Calls the API to fetch the data on first load and\r\n * dispatches the action to redux store to set the full data\r\n */\r\nexport default function Main() {\r\n    const moviesList = useSelector(state => state.moviesList);\r\n    const runningTrailerID = useSelector(state => state.runningTrailerID);\r\n\r\n    const dispatch = useDispatch();\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    // Make GET request to the API (The url is imported from config.json file)\r\n    useEffect(() => {\r\n        axios\r\n            .get(config.ApiUrl)\r\n            .then(res => {\r\n                if (res.status === 200) {\r\n                    dispatch(setFullData(res.data));\r\n                } else {\r\n                    console.log(\"Error \" + res.status);\r\n                    dispatch(setFullData(dummyData));\r\n                }\r\n                setLoading(false);\r\n            })\r\n            .catch(e => {\r\n                console.log(\"Error \" + e);\r\n                dispatch(setFullData(dummyData));\r\n                setLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    // Set a translusent background image corresponding to the trailer that is running\r\n    let bgImage = \"\";\r\n    if (runningTrailerID && runningTrailerID != \"\") {\r\n        const movie = moviesList.find(m => m.EventCode === runningTrailerID);\r\n        if (movie) bgImage = movie.EventImageUrl;\r\n    }\r\n    const blurBG = { backgroundImage: \"url(\" + bgImage + \")\" };\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <div className=\"blur-bg\" style={blurBG}></div>\r\n            <Header />\r\n            {isLoading && (\r\n                <div className=\"loading-gif\">\r\n                    <img src={loadingGif} alt=\"loading...\" />\r\n                </div>\r\n            )}\r\n            {!isLoading && <Dashboard />}\r\n        </div>\r\n    );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/loading.42aaa181.gif\";","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nimport Main from \"./components/Main.js\";\r\nimport store from \"./store/store.js\";\r\nimport \"./styles/style.css\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Main />\r\n    </Provider>,\r\n    document.getElementById(\"root\"),\r\n);\r\n"],"sourceRoot":""}